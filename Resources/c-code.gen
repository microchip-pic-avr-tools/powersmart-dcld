[generic]
Name=C-Source and Header Generator Script
Description=This scriptprovides C-source and header files for user-tailored SMPS control loops based on DSP assembly code modules templates generated using the DCLD SDK
Author=Andreas Reiter - M91406
Version=2.0.6
Date=04/23/2020

[history]
count=14
0=11/08/19;1.0.0;Initial version after moving C-sources and headers from application code to external script
1=01/10/20;1.1.0;Added support for cascaded functions. This allows the assembly routine to call another controller or user-defined function extension code module.\r\nAdded pointers to alternate source and terget register supporting bi-directional control and advanced adaptive control methods
2=03/18/2020;1.1.1;Changed function call name of controller initialization from xxx_Init to xxx_Initialize to stay consistent with other generic code modules
3=03/24/2020;1.1.2;Added grouping structures to cNPNZ16b_t data structure
4=03/25/2020;1.1.3;Added DCLD Version Key macro to cNPNZ16b.h header file, This allows to identify the library version in user code.
5=03/25/2020;1.1.4;Fixed bug in AGM related defines.
6=03/25/2020;1.1.5;Fixed typo in CGS_VERSION_DATE token
7=03/26/2020;2.0.0;Introduction of unified, 32-bit wide coefficient number format
8=03/27/2020;2.0.1;Separated input and output ports and added individual normalization scaling parameters
9=03/30/2020;2.0.2;Renamed data structure group 'TriggerControl' to 'ADC TriggerControl'
10=03/31/2020;2.0.3;Added P-Term controller for plant transfer function measurement support
11=04/03/2020;2.0.4;Added Token IDs for enhanced code generation option support
12=04/21/2020;2.0.5;Added user-defined function pointer to observer function to AGC declarations
13=04/23/2020;2.0.6;Fixed comments in C-Source file and bug not updating DCD version code


[tokens]
count=18
0=%EMPTY%
1=%SPACE%
2=%IDENT%
3=%DATA_TYPE_FRACTIONAL%
4=%DATA_TYPE_INT32%
5=%FILE_NAME_PATTERN%
6=%PREFIX%
7=%FILTER_ORDER%
8=%FILTER_ORDER+1%
9=%STRUCTURE_LABEL%
10=%CGS_VERSION%
11=%CGS_VERSION_DATE%
12=%APP_PRODUCT_NAME%
13=%APP_PRODUCT_VERSION%
14=%SUPPORT_URL%
15=%VENDOR_URL%
16=%TOOL_HOME_URL%

[option_ids]
count=37
0=%{(1100)}%;context_management
1=%{(1101)}%;context_shadow
2=%{(1102)}%;context_mac_wreg
3=%{(1103)}%;context_acc
4=%{(1104)}%;context_acc_a
5=%{(1105)}%;context_acc_b
6=%{(1106)}%;context_core_config
7=%{(1107)}%;context_core_status
8=%{(1200)}%;option_enable
9=%{(1201)}%;option_store_reload_acc
10=%{(1202)}%;option_core_config
11=%{(1203)}%;option_enable_switch
12=%{(1204)}%;option_enable_switch_always_read
13=%{(1205)}%;option_error_normalization
14=%{(1206)}%;option_adc_trigger_a_placement
15=%{(1207)}%;option_adc_trigger_b_placement
16=%{(1208)}%;option_cascade_call
17=%{(1209)}%;option_add_p-term
18=%{(1300)}%;data_interface_enable
19=%{(1301)}%;data_interface_alt_input
20=%{(1302)}%;data_interface_alt_output
21=%{(1400)}%;data_provider_enable
22=%{(1401)}%;data_provider_control_input
23=%{(1402)}%;data_provider_control_error
24=%{(1403)}%;data_provider_control_output
25=%{(1500)}%;anti_windup_enable
26=%{(1501)}%;anti_windup_max
27=%{(1502)}%;anti_windup_max_status_flag
28=%{(1503)}%;anti_windup_min
29=%{(1504)}%;anti_windup_min_status_flag
30=%{(1505)}%;anti_windup_soft_desat_flag
31=%{(1600)}%;feedback_conditioning_enable
32=%{(1601)}%;feedback_offset_compensation
33=%{(1602)}%;bi_directional_feedback_flag
34=%{(1800)}%;agc_enable
35=%{(1801)}%;agc_enable_switch
36=%{(1802)}%;agc_get_factor_function_call


[labels]
%SUPPORT_URL%=https://www.microchip.com/SMPS/
%VENDOR_URL%=https://www.microchip.com/
%TOOL_HOME_URL%=https://areiter128.github.io/DCLD


[library_header]
count=179
line0=      /* *********************************************************************************
line1=%SPACE%* %APP_PRODUCT_NAME%, Version %APP_PRODUCT_VERSION%
line2=%SPACE%* *********************************************************************************
line3=%SPACE%* Generic library header for z-domain compensation filter assembly functions
line4=%SPACE%* CGS Version: %CGS_VERSION%
line5=%SPACE%* CGS Date:    %CGS_VERSION_DATE%
line6=%SPACE%* ********************************************************************************/
line7=#ifndef __SPECIAL_FUNCTION_LAYER_LIB_NPNZ_H__
line8=#define __SPECIAL_FUNCTION_LAYER_LIB_NPNZ_H__
line9=%EMPTY%
line10=#include <xc.h> // include processor files - each processor file is guarded 
line11=#include <dsp.h> // include DSP data types (e.g. fractional)
line12=#include <stdint.h> // include standard integer number data types 
line13=#include <stdbool.h> // include standard boolean data types (true/false)
line14=%EMPTY%
line15=// Generic macro allowing to identify the file version of  'npnz16b.h'
line16=// This version key represents the product version of DCLD as integer number
line17=// of the form [MAJOR][MINOR][REVISION] => version 0.9.3.xxx would be shown as 903
line18=#ifndef __DCLD_VERSION
line19=%IDENT%#define __DCLD_VERSION    %DCLD_VERSION_CODE%
line20=#endif  // end of __DCLD_VERSION
line21=%EMPTY%
line22=/* Status flags (Single Bit) */
line23=#define NPNZ16_STATUS_LSAT_SET             1
line24=#define NPNZ16_STATUS_LSAT_CLEAR           0
line25=#define NPNZ16_STATUS_USAT_SET             1
line26=#define NPNZ16_STATUS_USAT_CLEAR           0
line27=#define NPNZ16_STATUS_AGC_ENABLED          1
line28=#define NPNZ16_STATUS_AGC_DISABLED         0
line29=#define NPNZ16_STATUS_TARGET_SWAPPED       1
line30=#define NPNZ16_STATUS_TARGET_NOT_SWAPPED   0
line31=#define NPNZ16_STATUS_SOURCE_SWAPPED       1
line32=#define NPNZ16_STATUS_SOURCE_NOT_SWAPPED   0
line33=#define NPNZ16_STATUS_INPUT_INVERTED       1
line34=#define NPNZ16_STATUS_INPUT_NOT_INVERTED   0
line35=#define NPNZ16_STATUS_ENABLED              1
line36=#define NPNZ16_STATUS_DISABLED             0
line37=%EMPTY%
line38=/* Status flags (bit-field) */
line39=typedef enum {
line40=%IDENT%CONTROLLER_STATUS_CLEAR           = 0b0000000000000000,
line41=%IDENT%CONTROLLER_STATUS_SATUATION_MSK   = 0b0000000000000011,
line42=%IDENT%CONTROLLER_STATUS_LSAT_ACTIVE     = 0b0000000000000001,
line43=%IDENT%CONTROLLER_STATUS_LSAT_CLEAR      = 0b0000000000000000,
line44=%IDENT%CONTROLLER_STATUS_USAT_ACTIVE     = 0b0000000000000010,
line45=%IDENT%CONTROLLER_STATUS_USAT_CLEAR      = 0b0000000000000000,
line46=%IDENT%CONTROLLER_STATUS_AGC_DISABLE     = 0b0000000000000000,
line47=%IDENT%CONTROLLER_STATUS_AGC_ENABLED     = 0b0000100000000000,
line48=%IDENT%CONTROLLER_STATUS_TARGET_DEFAULT  = 0b0000000000000000,
line49=%IDENT%CONTROLLER_STATUS_TARGET_SWAPED   = 0b0001000000000000,
line50=%IDENT%CONTROLLER_STATUS_SOURCE_DEFAULT  = 0b0000000000000000,
line51=%IDENT%CONTROLLER_STATUS_SOURCE_SWAPED   = 0b0010000000000000,
line52=%IDENT%CONTROLLER_STATUS_INV_INPUT_OFF   = 0b0000000000000000,
line53=%IDENT%CONTROLLER_STATUS_INV_INPUT_ON    = 0b0100000000000000,
line54=%IDENT%CONTROLLER_STATUS_ENABLE_OFF      = 0b0000000000000000,
line55=%IDENT%CONTROLLER_STATUS_ENABLE_ON       = 0b1000000000000000
line56=} CONTROLLER_STATUS_FLAGS_t;
line57=%EMPTY%
line58=typedef union {
line59=%IDENT%struct {
line60=%IDENT%%IDENT%volatile unsigned flt_clamp_min : 1; // Bit 0: control loop is clamped at minimum output level
line61=%IDENT%%IDENT%volatile unsigned flt_clamp_max : 1; // Bit 1: control loop is clamped at maximum output level
line62=%IDENT%%IDENT%volatile unsigned : 1; // Bit 2: reserved
line63=%IDENT%%IDENT%volatile unsigned : 1; // Bit 3: reserved
line64=%IDENT%%IDENT%volatile unsigned : 1; // Bit 4: reserved
line65=%IDENT%%IDENT%volatile unsigned : 1; // Bit 5: reserved
line66=%IDENT%%IDENT%volatile unsigned : 1; // Bit 6: reserved
line67=%IDENT%%IDENT%volatile unsigned : 1; // Bit 7: reserved
line68=%IDENT%%IDENT%volatile unsigned : 1; // Bit 8: reserved
line69=%IDENT%%IDENT%volatile unsigned : 1; // Bit 9: reserved
line70=%IDENT%%IDENT%volatile unsigned : 1; // Bit 11: reserved
line71=%IDENT%%IDENT%volatile unsigned agc_enabled: 1; // Bit 11: when set, Adaptive Gain Control Modulation is enabled
line72=%IDENT%%IDENT%volatile unsigned swap_target: 1; // Bit 12: when set, AltTarget is used as data output of controller
line73=%IDENT%%IDENT%volatile unsigned swap_source: 1; // Bit 13: when set, AltSource is used as data input to controller
line74=%IDENT%%IDENT%volatile unsigned invert_input: 1; // Bit 14: when set, most recent error input value to controller is inverted
line75=%IDENT%%IDENT%volatile unsigned enabled : 1; // Bit 15: enables/disables control loop execution
line76=%IDENT%} __attribute__((packed))bits;    // Controller status bit-field for direct bit access
line77=%IDENT%volatile uint16_t value;          // Controller status full register access
line78=} __attribute__((packed))CONTROLLER_STATUS_t; // Controller status data structure
line79=%EMPTY%
line80=typedef struct {
line81=%IDENT%volatile uint16_t* ptrAddress; // Pointer to register or variable where the value is read from (e.g. ADCBUFx) or written to (e.g. PGxDC)
line82=%IDENT%volatile uint16_t  NormScaler; // Bit-shift scaler of the Q15 normalization factor
line83=%IDENT%volatile fractional NormFactor; // Q15 normalization factor
line84=%IDENT%volatile uint16_t  Offset; // Value/signal offset of this port
line85=} __attribute__((packed))CONTROLLER_PORT_t;
line86=%EMPTY%
line87=typedef struct {
line88=%IDENT%// External control and monitoring
line89=%IDENT%volatile CONTROLLER_STATUS_t status; // Control Loop Status and Control flags
line90=%EMPTY%
line91=%IDENT%// Input/Output to controller
line92=%IDENT%struct {
line93=%IDENT%%IDENT%volatile CONTROLLER_PORT_t Source; // Primary data input port declaration
line94=%IDENT%%IDENT%volatile CONTROLLER_PORT_t AltSource; // Secondary data input port declaration
line95=%IDENT%%IDENT%volatile CONTROLLER_PORT_t Target; // Primary data output port declaration
line96=%IDENT%%IDENT%volatile CONTROLLER_PORT_t AltTarget; // Secondary data output port declaration
line97=%IDENT%%IDENT%volatile uint16_t* ptrControlReference; // Pointer to global variable of input register holding the controller reference value (e.g. uint16_t my_ref)
line98=%IDENT%} __attribute__((packed))Ports; // Controller block input and output port definitions
line99=%EMPTY%
line100=%IDENT%// Filter coefficients and input/output histories
line101=%IDENT%struct {
line102=%IDENT%%IDENT%volatile int32_t* ptrACoefficients; // Pointer to A coefficients located in X-space 
line103=%IDENT%%IDENT%volatile int32_t* ptrBCoefficients; // Pointer to B coefficients located in X-space 
line104=%IDENT%%IDENT%volatile fractional* ptrControlHistory; // Pointer to n delay-line samples located in Y-space with first sample being the most recent 
line105=%IDENT%%IDENT%volatile fractional* ptrErrorHistory; // Pointer to n+1 delay-line samples located in Y-space with first sample being the most recent 
line106=%EMPTY%
line107=%IDENT%%IDENT%// Array size information
line108=%IDENT%%IDENT%volatile uint16_t ACoefficientsArraySize; // Size of the A coefficients array in X-space
line109=%IDENT%%IDENT%volatile uint16_t BCoefficientsArraySize; // Size of the B coefficients array in X-space
line110=%IDENT%%IDENT%volatile uint16_t ControlHistoryArraySize; // Size of the control history array in Y-space
line111=%IDENT%%IDENT%volatile uint16_t ErrorHistoryArraySize; // Size of the error history array in Y-space
line112=%EMPTY%
line113=%IDENT%%IDENT%// Feedback scaling Input/Output Normalization
line114=%IDENT%%IDENT%volatile int16_t normPreShift; // Normalization of ADC-resolution to Q15 (R/W)
line115=%IDENT%%IDENT%volatile int16_t normPostShiftA; // Normalization of A-term control output to Q15 (R/W)
line116=%IDENT%%IDENT%volatile int16_t normPostShiftB; // Normalization of B-term control output to Q15 (R/W)
line117=%IDENT%%IDENT%volatile int16_t normPostScaler; // Control output normalization factor (Q15) (R/W)
line118=%EMPTY%
line119=%IDENT%%IDENT%// P-Term Coefficients (for plant measurements only)
line120=%IDENT%%IDENT%volatile int16_t PTermScaler; // Q15 P-Term Coefficient Bit-Shift Scaler (R/W)
line121=%IDENT%%IDENT%volatile int16_t PTermFactor; // Q15 P-Term Coefficient Factor (R/W)
line122=%IDENT%} __attribute__((packed))Filter; // Filter parameters such as pointer to history and coefficient arrays and number scaling
line123=%EMPTY%
line124=%IDENT%// System clamping/Anti-windup
line125=%IDENT%struct {
line126=%IDENT%%IDENT%volatile int16_t MinOutput; // Minimum output value used for clamping (R/W)
line127=%IDENT%%IDENT%volatile int16_t MaxOutput; // Maximum output value used for clamping (R/W)
line128=%IDENT%%IDENT%volatile int16_t AltMinOutput; // Alternate minimum output value used for clamping (R/W)
line129=%IDENT%%IDENT%volatile int16_t AltMaxOutput; // Alternate maximum output value used for clamping (R/W)
line130=%IDENT%} __attribute__((packed))Limits; // Input and output clamping values
line131=%EMPTY%
line132=%IDENT%// Voltage/Average Current Mode Control Trigger handling
line133=%IDENT%struct {
line134=%IDENT%%IDENT%volatile uint16_t* ptrADCTriggerARegister; // Pointer to ADC trigger #1 register (e.g. TRIG1)
line135=%IDENT%%IDENT%volatile uint16_t ADCTriggerAOffset; // ADC trigger #1 offset to compensate propagation delays 
line136=%IDENT%%IDENT%volatile uint16_t* ptrADCTriggerBRegister; // Pointer to ADC trigger #2 register (e.g. TRIG2)
line137=%IDENT%%IDENT%volatile uint16_t ADCTriggerBOffset; // ADC trigger #2 offset to compensate propagation delays 
line138=%IDENT%} __attribute__((packed))ADCTriggerControl; // Automatic ADC trigger placement options for ADC Trigger A and B
line139=%EMPTY%
line140=%IDENT%// Data Provider Sources
line141=%IDENT%struct {
line142=%IDENT%%IDENT%volatile uint16_t* ptrDProvControlInput; // Pointer to external data buffer of most recent control input 
line143=%IDENT%%IDENT%volatile uint16_t* ptrDProvControlError; // Pointer to external data buffer of most recent control error 
line144=%IDENT%%IDENT%volatile uint16_t* ptrDProvControlOutput; // Pointer to external data buffer of most recent control output 
line145=%IDENT%} __attribute__((packed))DataProviders; // Automated data sources pushing data points to user-defined variables
line146=%EMPTY%
line147=%IDENT%// Cascaded Function Call Parameters
line148=%IDENT%struct {
line149=%IDENT%%IDENT%volatile uint16_t ptrCascadedFunction; // Pointer to Function which should be called at the end of the control loop
line150=%IDENT%%IDENT%volatile uint16_t CascadedFunParam; // Parameter of function called (can be a pointer to a data structure)
line151=%IDENT%} __attribute__((packed))CascadeTrigger; // Cascade triggers with parameters for next function call
line152=%EMPTY%
line153=%IDENT%// Adaptive Gain Control Modulation
line154=%IDENT%struct {
line155=%IDENT%%IDENT%volatile uint16_t AgcScaler; // Bit-shift scaler of Adaptive Gain Modulation factor
line156=%IDENT%%IDENT%volatile fractional AgcFactor; // Q15 value of Adaptive Gain Modulation factor
line157=%IDENT%%IDENT%volatile fractional AgcMedian; // Q15 value of Adaptive Gain Modulation nominal operating point
line158=%IDENT%%IDENT%volatile uint16_t* ptrAgcObserverFunction; // Function Pointer to Observer function updating the AGC modulation factor
line159=%IDENT%} __attribute__((packed))GainControl; // Parameter section for advanced control options
line160=%EMPTY%
line161=%IDENT%// User Data Space for Advanced Control Functions
line162=%IDENT%struct {
line163=%IDENT%%IDENT%volatile uint16_t advParam1; // generic 16-bit wide, user-defined parameter #1 for advanced control options
line164=%IDENT%%IDENT%volatile uint16_t advParam2; // generic 16-bit wide, user-defined parameter #2 for advanced control options
line165=%IDENT%%IDENT%volatile uint16_t advParam3; // generic 16-bit wide, user-defined parameter #3 for advanced control options
line166=%IDENT%%IDENT%volatile uint16_t advParam4; // generic 16-bit wide, user-defined parameter #4 for advanced control options
line167=%IDENT%} __attribute__((packed))Advanced; // Parameter section for advanced control options
line168=%EMPTY%
line169=} __attribute__((packed))cNPNZ16b_t; // Generic nPnZ Controller Object with 16-bit fixed point coefficients, data input and data output
line170=%EMPTY%
line171=/* ********************************************************************************/
line172=#endif  // end of __SPECIAL_FUNCTION_LAYER_LIB_NPNZ_H__ header file section
line173=%EMPTY%
line174=%EMPTY%
line175=//**********************************************************************************
line176=// Download latest version of this tool here: %TOOL_HOME_URL%
line177=//**********************************************************************************
line178=%EMPTY%


[comp_header]
count=110
line0=      /* *********************************************************************************
line1=%SPACE%* %APP_PRODUCT_NAME%, Version %APP_PRODUCT_VERSION%
line2=%SPACE%* *********************************************************************************
line3=%SPACE%* %FILTER_ORDER%p%FILTER_ORDER%z controller function declarations and compensation filter coefficients
line4=%SPACE%* derived for following operating conditions:
line5=%SPACE%* *********************************************************************************
line6=%SPACE%*
line7=%SPACE%*  Controller Type:    %COMP_TYPE_NAME%
line8=%SPACE%*  Sampling Frequency: %SAMPLING_FREQUENCY% Hz 
line9=%SPACE%*  Fixed Point Format: %Q_FORMAT%
line10=%SPACE%*  Scaling Mode:       %SCALING_MODE%
line11=%SPACE%*  Input Gain:         %INPUT_GAIN%
line12=%SPACE%*
line13=%SPACE%* *********************************************************************************
line14=%SPACE%* CGS Version:         %CGS_VERSION%
line15=%SPACE%* CGS Date:            %CGS_VERSION_DATE%
line16=%SPACE%* *********************************************************************************
line17=%SPACE%* User:                %USER_NAME%
line18=%SPACE%* Date/Time:           %DATE_TODAY%
line19=%SPACE%* ********************************************************************************/
line20=%EMPTY%
line21=#ifndef __SPECIAL_FUNCTION_LAYER_%FILENAME_PATTERN_U%_H__
line22=#define __SPECIAL_FUNCTION_LAYER_%FILENAME_PATTERN_U%_H__
line23=%EMPTY%
line24=#include <xc.h> // include processor files - each processor file is guarded 
line25=#include <dsp.h> // include DSP data types (e.g. fractional)
line26=#include <stdint.h> // include standard integer number data types 
line27=#include <stdbool.h> // include standard boolean data types (true/false)
line28=%EMPTY%
line29=#include "%LIB_HEADER_INCLUDE_PATH%npnz16b.h" // include NPNZ library header file
line30=%EMPTY%
line31=      /* *******************************************************************************
line32=%SPACE%* Data Arrays:
line33=%SPACE%* The cNPNZ_t data structure contains pointers to coefficient, control and error  
line34=%SPACE%* history arrays. The pointer target objects (variables and arrays) are defined 
line35=%SPACE%* in controller source file %FILENAME_PATTERN_L%.c
line36=%SPACE%*
line37=%SPACE%* Type definitions for A- and B- coefficient arrays as well as error- and control 
line38=%SPACE%* history arrays are aligned in memory using the 'packed' attribute for optimized    
line39=%SPACE%* addressing during DSP computations. These aligned data structures need to be   
line40=%SPACE%* placed in specific memory locations to allow direct X/Y-access from the DSP. 
line41=%SPACE%* This X/Y-memory placement is covered by the declarations used in controller 
line42=%SPACE%* source file %FILENAME_PATTERN_L%.c
line43=%SPACE%* ******************************************************************************/
line44=typedef struct
line45={
line46=%IDENT%volatile %COEFF_DATA_TYPE% ACoefficients[%FILTER_ORDER%]; // A-Coefficients
line47=%IDENT%volatile %COEFF_DATA_TYPE% BCoefficients[%FILTER_ORDER+1%]; // B-Coefficients
line48=} __attribute__((packed)) %PREFIXU%CONTROL_LOOP_COEFFICIENTS_t;
line49=%EMPTY%
line50=typedef struct
line51={
line52=%IDENT%volatile %HISTORY_DATA_TYPE% ControlHistory[%FILTER_ORDER%];  // Control History Array
line53=%IDENT%volatile %HISTORY_DATA_TYPE% ErrorHistory[%FILTER_ORDER+1%];  // Error History Array
line54=} __attribute__((packed)) %PREFIXU%CONTROL_LOOP_HISTORIES_t;
line55=%{(1209)}%%EMPTY%
line56=%{(1209)}%// P-Term Coefficient for Plant Measurements
line57=%{(1209)}%extern volatile int16_t %PREFIX%pterm_factor;
line58=%{(1209)}%extern volatile int16_t %PREFIX%pterm_scaler;
line59=%{(1800)}%%EMPTY%
line60=%{(1800)}%//Adaptive Gain Control Coefficient
line61=%{(1800)}%extern volatile int16_t %PREFIX%agc_factor_default;
line62=%{(1800)}%extern volatile int16_t %PREFIX%agc_scaler_default;
line63=%EMPTY%
line64=%EMPTY%
line65=// User-defined cNPNZ_t controller data object
line66=extern volatile %STRUCTURE_LABEL% %FILENAME_PATTERN%; // user-controller data object
line67=%EMPTY%
line68=      /* *******************************************************************************
line69=%SPACE%* Function call prototypes for initialization routines and control loops
line70=%SPACE%* ******************************************************************************/
line71=%EMPTY%
line72=// Initialization of %FILENAME_PATTERN% controller object
line73=extern volatile uint16_t %FILENAME_PATTERN%_Initialize( // %FILENAME_PATTERN% initialization function call
line74=%IDENT%%IDENT%volatile %STRUCTURE_LABEL%* controller // Pointer to nPnZ data type object
line75=%IDENT%);
line76=%EMPTY%
line77=// Clears the %FILTER_ORDER%P%FILTER_ORDER%Z controller output and error histories
line78=extern void %FILENAME_PATTERN%_Reset( // %FILENAME_PATTERN% reset function call (Assembly)
line79=%IDENT%%IDENT%volatile %STRUCTURE_LABEL%* controller // Pointer to nPnZ data type object
line80=%IDENT%);
line81=%EMPTY%
line82=// Loads user-defined values into %FILTER_ORDER%P%FILTER_ORDER%Z controller output and error histories
line83=extern void %FILENAME_PATTERN%_Precharge( // %FILENAME_PATTERN% history pre-charge function call (Assembly)
line84=%IDENT%%IDENT%volatile %STRUCTURE_LABEL%* controller, // Pointer to nPnZ data type object
line85=%IDENT%%IDENT%volatile %HISTORY_DATA_TYPE% ctrl_input, // user-defined, constant error history value
line86=%IDENT%%IDENT%volatile %HISTORY_DATA_TYPE% ctrl_output // user-defined, constant control output history value
line87=%IDENT%);
line88=%EMPTY%
line89=// Calls the %FILENAME_PATTERN% control loop
line90=extern void %FILENAME_PATTERN%_Update( // Calls the %FILTER_ORDER%P%FILTER_ORDER%Z controller (Assembly)
line91=%IDENT%%IDENT%volatile %STRUCTURE_LABEL%* controller // Pointer to nPnZ data type object
line92=%IDENT%);
line93=%EMPTY%
line94=%{(1209)}%// Calls the %FILENAME_PATTERN% P-Term controller during measurements of plant transfer functions
line95=%{(1209)}%// THIS CONTROLLER IS USED FOR MEASUREMENTS OF THE PLANT TRANSFER FUNCTION ONLY.
line96=%{(1209)}%// THIS LOOP IS BY DEFAULT UNSTABLE AND ONLY WORKS UNDER STABLE TEST CONDITIONS
line97=%{(1209)}%// DO NOT USE THIS CONTROLLER TYPE FOR NORMAL OPERATION
line98=%{(1209)}%extern void %FILENAME_PATTERN%_PTermUpdate( // Calls the P-Term controller (Assembly)
line99=%{(1209)}%%IDENT%%IDENT%volatile %STRUCTURE_LABEL%* controller // Pointer to nPnZ data type object
line100=%{(1209)}%%IDENT%);
line101=%{(1209)}%%EMPTY%
line102=%EMPTY%
line103=#endif // end of __SPECIAL_FUNCTION_LAYER_%FILENAME_PATTERN_U%_H__
line104=%EMPTY%
line105=%EMPTY%
line106=//**********************************************************************************
line107=// Download latest version of this tool here: %TOOL_HOME_URL%
line108=//**********************************************************************************
line109=%EMPTY%


[comp_source_head]
count=86
line0=      /* *********************************************************************************
line1=%SPACE%* %APP_PRODUCT_NAME%, Version %APP_PRODUCT_VERSION%
line2=%SPACE%* *********************************************************************************
line3=%SPACE%* %FILTER_ORDER%p%FILTER_ORDER%z controller function declarations and compensation filter coefficients
line4=%SPACE%* derived for following operating conditions:
line5=%SPACE%* *********************************************************************************
line6=%SPACE%*
line7=%SPACE%*  Controller Type:    %COMP_TYPE_NAME%
line8=%SPACE%*  Sampling Frequency: %SAMPLING_FREQUENCY% Hz 
line9=%SPACE%*  Fixed Point Format: %Q_FORMAT%
line10=%SPACE%*  Scaling Mode:       %SCALING_MODE%
line11=%SPACE%*  Input Gain:         %INPUT_GAIN%
line12=%SPACE%*
line13=%SPACE%* *********************************************************************************
line14=%SPACE%* CGS Version:         %CGS_VERSION%
line15=%SPACE%* CGS Date:            %CGS_VERSION_DATE%
line16=%SPACE%* *********************************************************************************
line17=%SPACE%* User:                %USER_NAME%
line18=%SPACE%* Date/Time:           %DATE_TODAY%
line19=%SPACE%* ********************************************************************************/
line20=%EMPTY%
line21=#include "%C_HEADER_INCLUDE_PATH%"
line22=%EMPTY%
line23=      /* *********************************************************************************
line24=%SPACE%* Data Arrays:
line25=%SPACE%* This source file declares the default parameters of the z-domain compensation  
line26=%SPACE%* filter. The cNPNZ_t data structure contains two pointers to A- and B- 
line27=%SPACE%* coefficient arrays and two pointers to control and error history arrays.
line28=%SPACE%*
line29=%SPACE%* For optimized data processing during DSP computations, these arrays must be 
line30=%SPACE%* located in specific memory locations (X-space for coefficient arrays and 
line31=%SPACE%* Y-space for control and error history arrays). 
line32=%SPACE%*
line33=%SPACE%* The following declarations are used to define the array data contents, their 
line34=%SPACE%* length and memory location. These declarations are made publicly accessible 
line35=%SPACE%* through extern declarations in header file %FILENAME_PATTERN_L%.h
line36=%SPACE%* ********************************************************************************/
line37=%EMPTY%
line38=volatile %PREFIXU%CONTROL_LOOP_COEFFICIENTS_t __attribute__((space(xmemory), near)) %PREFIX%coefficients; // A/B-Coefficients 
line39=volatile uint16_t %PREFIX%ACoefficients_size = (sizeof(%PREFIX%coefficients.ACoefficients)/sizeof(%PREFIX%coefficients.ACoefficients[0])); // A-coefficient array size
line40=volatile uint16_t %PREFIX%BCoefficients_size = (sizeof(%PREFIX%coefficients.BCoefficients)/sizeof(%PREFIX%coefficients.BCoefficients[0])); // B-coefficient array size
line41=%EMPTY%
line42=volatile %PREFIXU%CONTROL_LOOP_HISTORIES_t __attribute__((space(ymemory), far)) %PREFIX%histories; // Control/Error Histories 
line43=volatile uint16_t %PREFIX%ControlHistory_size = (sizeof(%PREFIX%histories.ControlHistory)/sizeof(%PREFIX%histories.ControlHistory[0])); // Control history array size
line44=volatile uint16_t %PREFIX%ErrorHistory_size = (sizeof(%PREFIX%histories.ErrorHistory)/sizeof(%PREFIX%histories.ErrorHistory[0])); // Error history array size
line45=%EMPTY%
line46=      /* *********************************************************************************
line47=%SPACE%* Pole&Zero Placement:
line48=%SPACE%* *********************************************************************************
line49=%SPACE%*
line50=%SPACE%*%IDENT%fP%INDEX%:%IDENT%%LOOP_POLE_LOCATION_LIST% Hz
line51=%SPACE%*%IDENT%fZ%INDEX%:%IDENT%%LOOP_ZERO_LOCATION_LIST% Hz
line52=%SPACE%*
line53=%SPACE%* *********************************************************************************
line54=%SPACE%* Filter Coefficients and Parameters:
line55=%SPACE%* ********************************************************************************/
line56=volatile %COEFF_DATA_TYPE% %PREFIX%ACoefficients [%FILTER_ORDER%] =
line57={
line58=%IDENT%%LOOP_A_COEFFICIENTS_LIST% // Coefficient A%INDEX% will be multiplied with controller output u(n-%INDEX%)
line59=};
line60=%EMPTY%
line61=volatile %COEFF_DATA_TYPE% %PREFIX%BCoefficients [%FILTER_ORDER+1%] =
line62={
line63=%IDENT%%LOOP_B_COEFFICIENTS_LIST% // Coefficient B%INDEX% will be multiplied with error input e(n-%INDEX%)
line64=};
line65=%EMPTY%
line66=// Coefficient normalization factors
line67=volatile int16_t %PREFIX%pre_scaler = %PRESCALER%;
line68=volatile int16_t %PREFIX%post_shift_A = %POSTSHIFT_A%;
line69=volatile int16_t %PREFIX%post_shift_B = %POSTSHIFT_B%;
line70=volatile fractional %PREFIX%post_scaler = %POSTSCALER%;
line71=%{(1209)}%%EMPTY%
line72=%{(1209)}%// P-Term Coefficient for Plant Measurements
line73=%{(1209)}%volatile int16_t %PREFIX%pterm_factor = %PTERMFACTOR%;
line74=%{(1209)}%volatile int16_t %PREFIX%pterm_scaler = %PTERMSCALER%;
line75=%{(1800)}%%EMPTY%
line76=%{(1800)}%//Adaptive Gain Control Coefficient
line77=%{(1800)}%volatile int16_t %PREFIX%agc_factor_default = %AGCFACTOR%;
line78=%{(1800)}%volatile int16_t %PREFIX%agc_scaler_default = %AGCSCALER%;
line79=%EMPTY%
line80=%EMPTY%
line81=// User-defined cNPNZ_t controller data object
line82=volatile %STRUCTURE_LABEL% %FILENAME_PATTERN%; // user-controller data object
line83=%EMPTY%
line84=     /* ********************************************************************************/
line85=%EMPTY%


[comp_source_functions]
count=1
function0=comp_source_init


[comp_source_init]
count=75
line0=      /*!%FILENAME_PATTERN%_Init()
line1=%SPACE%* *********************************************************************************
line2=%SPACE%* Summary: Initializes controller coefficient arrays and normalization
line3=%SPACE%* 
line4=%SPACE%* Parameters:
line5=%SPACE%*     - %STRUCTURE_LABEL%* controller
line6=%SPACE%* 
line7=%SPACE%* Returns:
line8=%SPACE%*     - uint16_t:  0->failure
line9=%SPACE%*                  1->success
line10=%EMPTY%
line11=%SPACE%* Description:
line12=%SPACE%* This function needs to be called from user code once to initialize coefficient 
line13=%SPACE%* arrays and number normalization settings of the %FILENAME_PATTERN% controller 
line14=%SPACE%* object.
line15=%SPACE%* 
line16=%SPACE%* PLEASE NOTE:
line17=%SPACE%* This routine DOES NOT initialize the complete controller object.
line18=%SPACE%* User-defined settings such as pointers to the control reference, source and  
line19=%SPACE%* target registers, output minima and maxima and further, design-dependent  
line20=%SPACE%* settings, need to be specified in user code.
line21=%SPACE%* ********************************************************************************/
line22=volatile uint16_t %FILENAME_PATTERN%_Initialize(volatile %STRUCTURE_LABEL%* controller)
line23={
line24=%IDENT%volatile uint16_t i=0;
line25=%EMPTY%
line26=%IDENT%// Initialize controller data structure at runtime with pre-defined default values
line27=%IDENT%controller->status.value = CONTROLLER_STATUS_CLEAR;  // clear all status flag bits (will turn off execution))
line28=%IDENT%
line29=%IDENT%controller->Filter.ptrACoefficients = &%PREFIX%coefficients.ACoefficients[0]; // initialize pointer to A-coefficients array
line30=%IDENT%controller->Filter.ptrBCoefficients = &%PREFIX%coefficients.BCoefficients[0]; // initialize pointer to B-coefficients array
line31=%IDENT%controller->Filter.ptrControlHistory = &%PREFIX%histories.ControlHistory[0]; // initialize pointer to control history array
line32=%IDENT%controller->Filter.ptrErrorHistory = &%PREFIX%histories.ErrorHistory[0]; // initialize pointer to error history array
line33=%IDENT%controller->Filter.normPostShiftA = %PREFIX%post_shift_A; // initialize A-coefficients/single bit-shift scaler
line34=%IDENT%controller->Filter.normPostShiftB = %PREFIX%post_shift_B; // initialize B-coefficients/dual/post scale factor bit-shift scaler
line35=%IDENT%controller->Filter.normPostScaler = %PREFIX%post_scaler; // initialize control output value normalization scaling factor
line36=%IDENT%controller->Filter.normPreShift = %PREFIX%pre_scaler; // initialize A-coefficients/single bit-shift scaler
line37=%IDENT%
line38=%IDENT%controller->Filter.ACoefficientsArraySize = %PREFIX%ACoefficients_size; // initialize A-coefficients array size
line39=%IDENT%controller->Filter.BCoefficientsArraySize = %PREFIX%BCoefficients_size; // initialize A-coefficients array size
line40=%IDENT%controller->Filter.ControlHistoryArraySize = %PREFIX%ControlHistory_size; // initialize control history array size
line41=%IDENT%controller->Filter.ErrorHistoryArraySize = %PREFIX%ErrorHistory_size; // initialize error history array size
line42=%IDENT%
line43=%IDENT%
line44=%IDENT%// Load default set of A-coefficients from user RAM into X-Space controller A-array
line45=%IDENT%for(i=0; i<controller->Filter.ACoefficientsArraySize; i++)
line46=%IDENT%{
line47=%IDENT%%IDENT%%PREFIX%coefficients.ACoefficients[i] = %PREFIX%ACoefficients[i];
line48=%IDENT%}
line49=%EMPTY%
line50=%IDENT%// Load default set of B-coefficients from user RAM into X-Space controller B-array
line51=%IDENT%for(i=0; i<controller->Filter.BCoefficientsArraySize; i++)
line52=%IDENT%{
line53=%IDENT%%IDENT%%PREFIX%coefficients.BCoefficients[i] = %PREFIX%BCoefficients[i];
line54=%IDENT%}
line55=%EMPTY%
line56=%IDENT%// Clear error and control histories of the 3P3Z controller
line57=%IDENT%%FILENAME_PATTERN%_Reset(&%FILENAME_PATTERN%);
line58=%{(1209)}%%IDENT%
line59=%{(1209)}%%IDENT%// Load P-Term factor and scaler into data structure
line60=%{(1209)}%%IDENT%controller->Filter.PTermFactor = %PREFIX%pterm_factor;;
line61=%{(1209)}%%IDENT%controller->Filter.PTermScaler = %PREFIX%pterm_scaler;
line62=%{(1800)}%%IDENT%
line63=%{(1800)}%%IDENT%// Load initial AGC factor and scaler into data structure
line64=%{(1800)}%%IDENT%controller->GainControl.AgcFactor = %PREFIX%agc_factor_default;
line65=%{(1800)}%%IDENT%controller->GainControl.AgcScaler = %PREFIX%agc_scaler_default;
line66=%IDENT%
line67=%IDENT%return(1);
line68=}
line69=%EMPTY%
line70=%EMPTY%
line71=//**********************************************************************************
line72=// Download latest version of this tool here: %TOOL_HOME_URL%
line73=//**********************************************************************************
line74=%EMPTY%


___________________________________________________
(C)2020, Microchipt Technology Inc.
