<SyntaxLanguage Key="Assembly" LanguageDefinitionVersion="4.0" Secure="True" 
				xmlns="http://ActiproSoftware/SyntaxEditor/4.0/LanguageDefinition">

	<!-- String Properties -->
	<Properties>
		<Property Key="Creator" Value="Actipro Software LLC" />
		<Property Key="Copyright" Value="Copyright (c) 2001-2008 Actipro Software LLC.  All rights reserved." />
	</Properties>

	<!-- Highlighting Styles -->	
	<Styles>
		<Style Key="ReservedWordStyle" ForeColor="Blue" />
		<Style Key="RegisterNameStyle" ForeColor="DarkRed" />
		<Style Key="NativeTypeStyle" ForeColor="Blue" />
		<Style Key="LabelStyle" ForeColor="Teal" />
		<Style Key="NumberStyle" ForeColor="Purple" />
		<Style Key="StringDelimiterStyle" ForeColor="Maroon" />
		<Style Key="StringDefaultStyle" ForeColor="Maroon" />
		<Style Key="CommentDelimiterStyle" ForeColor="Green" />
		<Style Key="CommentDefaultStyle" ForeColor="Green" />
	</Styles>
	
	<!-- States -->
	<States>
		<!-- Code -->
		<State Key="DefaultState">
			<!-- Patterns Groups -->
			<PatternGroups>
				<!-- Whitespace -->
				<RegexPatternGroup TokenKey="WhitespaceToken" PatternValue="{WhitespaceMacro}+" IsWhitespace="True" />
				<!-- Line Terminators -->
				<RegexPatternGroup TokenKey="LineTerminatorToken" PatternValue="{LineTerminatorMacro}" IsWhitespace="True" />
				<!-- Brackets -->
				<ExplicitPatternGroup Key="OpenParenthesisPatternGroup" TokenKey="OpenParenthesisToken" PatternValue="(" EndBracket="CloseParenthesisPatternGroup" />
				<ExplicitPatternGroup Key="CloseParenthesisPatternGroup" TokenKey="CloseParenthesisToken" PatternValue=")" StartBracket="OpenParenthesisPatternGroup" />
				<ExplicitPatternGroup Key="OpenSquareBracePatternGroup" TokenKey="OpenSquareBraceToken" PatternValue="[" EndBracket="CloseSquareBracePatternGroup" />
				<ExplicitPatternGroup Key="CloseSquareBracePatternGroup" TokenKey="CloseSquareBraceToken" PatternValue="]" StartBracket="OpenSquareBracePatternGroup" />
				<!-- Punctuation -->
				<ExplicitPatternGroup TokenKey="PunctuationToken">
					<ExplicitPatterns>
						_ . , : ; ! $ ? = + - * / &lt; &gt;
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				<!-- Reserved Words -->
				<ExplicitPatternGroup TokenKey="ReservedWordToken" Style="ReservedWordStyle" LookAhead="{NonWordMacro}|\z">
					<ExplicitPatterns>
						LIST NOLIST SECTION TEXT EQU LIBDSP CODE GLOBAL END
						DSRPAG DSWPAG EXCH MOV MOVPAG SWAP TBLPAG TBLRDH TBLRDL TBLWTH TBLWTL
						ADD ADDC DAW DEC DEC2 DIV DIVF INC INC2 MUL MULW SE SUB SUBB SUBBR SUBR ZE
						AND CLR COM IOR NEG SETM XOR
						ASR LSR RLC RLNC RRC RRNC SL 
						BCLR BSET BSW BTG BTST BTSTS FBCL FF1L FF1R 
						BTSC BTSS CP CP0 CPB CPBEQ CPBGT CPBLT CPBNE CPSEQ CPSGT CPSLT CPSNE 
						BRA CALL DO GOTO RCALL REPEAT RETFIE RETLW RETURN
						LNK POP PUSH ULNK
						CLRWDT DISI NOP NOPR PWRSAV RESET
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				<!-- Specific dsPIC DSP Assembly Key Words -->
				<ExplicitPatternGroup TokenKey="ReservedWordToken" Style="ReservedWordStyle" LookAhead="{NonWordMacro}|\z">
					<ExplicitPatterns>
						ED EDAC LAC MAC MOVSAC MPY MSC NEG SAC SFTAC  
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				<!-- Specific dsPIC Registers -->
				<ExplicitPatternGroup TokenKey="ReservedWordToken" Style="RegisterNameStyle" LookAhead="{NonWordMacro}|\z">
					<ExplicitPatterns>
						CORCON SR
						W0 W1 W2 W3 W4 W5 W6 W7 W8 W9 W10 W11 W12 W13 W14 W15 ACCAL ACCAH ACCAU ACCBL ACCBH ACCBU
					</ExplicitPatterns>
				</ExplicitPatternGroup>
				<!-- Label -->
				<RegexPatternGroup TokenKey="LabelToken" Style="LabelStyle" PatternValue="([\._@\$\?] | {AlphaMacro})([@\$\?] | {WordMacro})* \:" />
				<!-- Identifier -->
				<RegexPatternGroup TokenKey="IdentifierToken" PatternValue="([\._@\$\?] | {AlphaMacro})([@\$\?] | {WordMacro})*" />
				<!-- Numbers -->
				<RegexPatternGroup TokenKey="HexNumberToken" Style="NumberStyle" PatternValue="0 [Xx] {HexDigitMacro}+" LookAhead="{NonWordMacro}|\z" />
				<RegexPatternGroup TokenKey="OctalNumberToken" Style="NumberStyle" PatternValue="0 [0-7]*" LookAhead="{NonWordMacro}|\z" />
				<RegexPatternGroup TokenKey="BinaryNumberToken" Style="NumberStyle" PatternValue="0 [Bb] [0-1]+" LookAhead="{NonWordMacro}|\z" />
				<RegexPatternGroup TokenKey="DecimalNumberToken" Style="NumberStyle" PatternValue="[1-9][0-9]*" LookAhead="{NonWordMacro}|\z" />
			</PatternGroups>
			<!-- Child States -->
			<ChildStates>
				<ChildState Key="SingleQuoteStringState" />
				<ChildState Key="DoubleQuoteStringState" />
				<ChildState Key="CommentState" />
			</ChildStates>
		</State>
		
		<!-- Single-Quote Strings -->
		<State Key="SingleQuoteStringState" TokenKey="SingleQuoteStringDefaultToken" Style="StringDefaultStyle">
			<!-- Scopes -->
			<Scopes>
				<Scope>
					<ExplicitPatternGroup Type="StartScope" TokenKey="SingleQuoteStringStartToken" Style="StringDelimiterStyle" PatternValue="'" />
					<ExplicitPatternGroup Type="EndScope" TokenKey="SingleQuoteStringEndToken" Style="StringDelimiterStyle" PatternValue="'" />	
				</Scope>
			</Scopes>
			<!-- Patterns Groups -->
			<PatternGroups>
				<ExplicitPatternGroup TokenKey="SingleQuoteStringEscapedCharacterToken" PatternValue="''" />
				<RegexPatternGroup TokenKey="SingleQuoteStringDefaultToken" PatternValue="[^\']+" />
			</PatternGroups>
		</State>
		
		<!-- Double-Quote Strings -->
		<State Key="DoubleQuoteStringState" TokenKey="DoubleQuoteStringDefaultToken" Style="StringDefaultStyle">
			<!-- Scopes -->
			<Scopes>
				<Scope>
					<ExplicitPatternGroup Type="StartScope" TokenKey="DoubleQuoteStringStartToken" Style="StringDelimiterStyle" PatternValue="&quot;" />
					<ExplicitPatternGroup Type="EndScope" TokenKey="DoubleQuoteStringEndToken" Style="StringDelimiterStyle" PatternValue="&quot;" />	
				</Scope>
			</Scopes>
			<!-- Patterns Groups -->
			<PatternGroups>
				<ExplicitPatternGroup TokenKey="DoubleQuoteStringEscapedCharacterToken" PatternValue="&quot;&quot;" />
				<RegexPatternGroup TokenKey="DoubleQuoteStringDefaultToken" PatternValue="[^\&quot;]+" />
			</PatternGroups>
		</State>
		
		<!-- Comments -->
		<State Key="CommentState" TokenKey="CommentDefaultToken" Style="CommentDefaultStyle">
			<!-- Scopes -->
			<Scopes>
				<Scope>
					<ExplicitPatternGroup Type="StartScope" TokenKey="CommentStartToken" Style="CommentDelimiterStyle" PatternValue=";" />
					<RegexPatternGroup Type="EndScope" TokenKey="CommentEndToken" Style="CommentDelimiterStyle" PatternValue="{LineTerminatorMacro}" IsWhitespace="True" />	
				</Scope>
			</Scopes>
			<!-- Patterns Groups -->
			<PatternGroups>
				<RegexPatternGroup TokenKey="CommentDefaultToken" PatternValue="{NonLineTerminatorMacro}+" />
			</PatternGroups>
		</State>
		
	</States>

	<!-- Example Text -->
	<ExampleText>
		<![CDATA[
section	.text
    global _start

_start:			; The entry point

	mov	edx,len	; The message length
	mov	ecx,msg	; The message to write
	mov	ebx,1	; File descriptor (stdout)
	mov	eax,4	; System call number (sys_write)
	int	0x80	; Call kernel

	mov	eax,1	; System call number (sys_exit)
	int	0x80	; Call kernel

section	.data

msg	db	'Hello, world!',0xa
len	equ	$ - msg
	]]>
	</ExampleText>
		
</SyntaxLanguage>
